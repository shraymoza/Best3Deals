stages:
  - build
  - analysis
  - analysis-publish
  - test
  - publish
  - deploy

build-job:
  stage: build
  image: maven:3.8.4-openjdk-17
  tags:
    - csci5308-group5-best3deal
  script:
    - cd backend
    - mvn clean package
    - echo "Compile complete."
  artifacts:
    paths:
      - backend/target/*.jar
    expire_in: 1 week
  
analysis:
  stage: analysis
  image: openjdk:17
  tags:
    - csci5308-group5-best3deal
  script:
    - echo "Running DesigniteJava code analysis"
    - echo $CI_PROJECT_DIR
    - pwd
    - mkdir smells/
    - ls
    - java -jar $CI_PROJECT_DIR/backend/code_quality/DesigniteJava.jar -i  $CI_PROJECT_DIR/backend -o smells/
    - echo "Analysis complete. Results saved to designite_output/"
  artifacts:
    paths:
      - smells/
  only:
    - main
  

analysis-publish:
  stage: analysis-publish
  image: python:3.10
  tags:
    - csci5308-group5-best3deal
  script:
    - echo "Reporting to gitlab"
    - echo "Install python scripts"
    - pip install -r $CI_PROJECT_DIR/backend/code_quality/requirements.txt
    - python3 $CI_PROJECT_DIR/backend/code_quality/create_issue.py $CI_COMMIT_SHA
  only:
    - main


unit-test-job:
  stage: test
  image: maven:3.8.4-openjdk-17
  tags:
    - csci5308-group5-best3deal
  script:
    - cd backend
    - mvn test
    - echo "Test complete."
  
publish-job:
  image: docker:latest
  stage: publish
  tags:
    - csci5308-group5-best3deal
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
  services:
    - docker:dind
  before_script:
    - docker info
  script:
    - pwd
    - cd backend
    - pwd
    - ls
    - echo $SERVER_IP
    - docker --version
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io
    - docker build -t docker.io/csci5308group5/best3deal:$CI_COMMIT_SHORT_SHA .
    - docker push docker.io/csci5308group5/best3deal:$CI_COMMIT_SHORT_SHA
  only:
    - main

deploy-job:
  image: alpine:latest
  stage: deploy
  tags:
    - csci5308-group5-best3deal
  before_script:
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$ID_ED25519"
    - chmod 600 "$ID_ED25519"
    - ssh-add "$ID_ED25519"

  script:
    - ssh -T -i $ID_ED25519 -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "echo 'Connection test successful!'"
    - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" \
      "docker login -u '$DOCKER_HUB_USER' -p '$DOCKER_HUB_PWD' docker.io"
    - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" \
      "docker pull docker.io/csci5308group5/best3deal:$CI_COMMIT_SHORT_SHA"
    - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" \
      "docker container rm -f my-app || true"
    - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" \
      "docker run -d -p 8080:8080 -e JWT_KEY='$JWT_KEY' -e GOOGLE_SMTP_USER='$GOOGLE_SMTP_USER' -e GOOGLE_SMTP_PSWD='$GOOGLE_SMTP_PSWD' -e DB_USER_DEV='$DB_USER_DEV' -e DB_USER_TEST='$DB_USER_TEST' -e DB_USER_PROD='$DB_USER_PROD' -e DB_PSWD='$DB_PSWD' -e S3_ACCESS_KEY='$S3_ACCESS_KEY' -e S3_SECRET_KEY='$S3_SECRET_KEY' -e SPRING_PROFILES_ACTIVE=prod --name my-app docker.io/csci5308group5/best3deal:$CI_COMMIT_SHORT_SHA"

  environment:
    name: production
    url: http://$SERVER_IP:8080
  after_script:
    - echo "=== Deployment Completed ==="
  only:
    - main